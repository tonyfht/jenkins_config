<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.15">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.3.3">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/Check_Maven_Pipeline</mappedUrl>
        <modelObject class="flow-definition" reference="../../../.."/>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>Rama</name>
          <description>Se debe seleccionar la rama que se desea ejecutar</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>master</string>
              <string>branches</string>
              <string>branches2</string>
              <string>branchesdemo</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.2">
      <gitLabConnection></gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty plugin="job-restrictions@0.6"/>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.41">
    <script>node {

    currentBuild.displayName=${Rama}
    currentBuild.description=&quot;Check maven pipeline prueba de concepto&quot;

    def m2=&quot;C://Software//apache-maven-3.5.0//bin&quot;

        stage(&apos;Checkout&apos;) {
            /* 
            Se realiza el checkout del repositorio de GIT. Se proporciona un parámetro
            de entrada que será una etiqueta o rama para ejecutar. 
          */
            checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &apos;https://gitlab.com/antoniofrancisco.herrera/Check.git&apos;]]])
            
            echo &apos;Stage Checkout realizado correctamente.&apos;
        }
        stage(&apos;Build&apos;) {
            /* 
            Se realiza la contrucción del proyecto y test unitarios. Los parámetros
            de uso general se han declarado en environment for the run
            */ 
            
             sh &quot;${m2}/mvn install -Dmaven.test.failure.ignore=true -U&quot;
             
            echo &apos;Stage Build realizado correctamente.&apos;
        }
        stage(&apos;Quality&apos;) {
            /* 
            Se realiza la revisión de código en el proyecto con SonarQube.
            */
            
            sh &quot;${m2}/mvn install sonar:sonar -Dmaven.test.failure.ignore=true -U&quot;

            echo &apos;Stage Build realizado correctamente.&apos;
        }

        stage(&apos;Tests&apos;) {
            echo &apos;Pipeline Tests finalizado correctamente&apos;
        }
        stage(&apos;InformeCheckstyle&apos;) {
            echo &apos;Pipeline Tests finalizado correctamente&apos;
        }
        stage(&apos;InformePMD&apos;) {
            echo &apos;Pipeline Tests finalizado correctamente&apos;
        }
        stage(&apos;InformeCobertura&apos;) {
            echo &apos;Pipeline Tests finalizado correctamente&apos;
        }
        stage(&apos;DeployNexus&apos;) {
            /*
            Se realiza la subida de los Artefactos a Nexus. Los parámetros de uso 
            general se han declarado en environment for the run
            
            sh &quot;${m2}/mvn deploy -Denv-pro=true -Dmaven.test.skip=true -Dusuario=${user} -Dclave=${password}&quot;
            */
            echo &apos;Pipeline Deploy_Nexus finalizado correctamente&apos;   
        }
        stage(&apos;DeployApp&apos;) {
            
            echo &apos;Pipeline DeployApp finalizado correctamente&apos;  
        }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>